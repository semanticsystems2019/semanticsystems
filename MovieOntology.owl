Prefix(:=<http://www.semanticweb.org/raphael/ontologies/2019/10/untitled-ontology-2#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/raphael/ontologies/2019/10/untitled-ontology-2>

Declaration(Class(:Action))
Declaration(Class(:Comment))
Declaration(Class(:Drama))
Declaration(Class(:Emotion))
Declaration(Class(:Horror))
Declaration(Class(:Indifferent))
Declaration(Class(:InstaPost))
Declaration(Class(:Instagram))
Declaration(Class(:Kids))
Declaration(Class(:Movie))
Declaration(Class(:Negative))
Declaration(Class(:Positive))
Declaration(Class(:Post))
Declaration(Class(:Reddit))
Declaration(Class(:RedditPost))
Declaration(Class(:Romance))
Declaration(Class(:Source))
Declaration(Class(:Tweet))
Declaration(Class(:Twitter))
Declaration(Class(:User))
Declaration(Class(:Youtube))
Declaration(Class(:YoutubePost))
Declaration(ObjectProperty(:createdBy))
Declaration(ObjectProperty(:hasEmotion))
Declaration(ObjectProperty(:hasSource))
Declaration(ObjectProperty(:isCommentOn))
Declaration(ObjectProperty(:isOriginalPosterOfPost))
Declaration(ObjectProperty(:refersToMovie))
Declaration(DataProperty(:hasDate))
Declaration(DataProperty(:hasId))
Declaration(DataProperty(:hasLikes))
Declaration(DataProperty(:hasRetweet))
Declaration(DataProperty(:hasText))
Declaration(DataProperty(:hasTitle))
Declaration(DataProperty(:hasUsername))
############################
#   Object Properties
############################

# Object Property: :createdBy (:createdBy)

ObjectPropertyDomain(:createdBy ObjectUnionOf(:Comment :Post))
ObjectPropertyRange(:createdBy :User)

# Object Property: :hasEmotion (:hasEmotion)

ObjectPropertyDomain(:hasEmotion ObjectUnionOf(:Comment :Post))
ObjectPropertyRange(:hasEmotion :Emotion)

# Object Property: :hasSource (:hasSource)

ObjectPropertyDomain(:hasSource :Post)
ObjectPropertyRange(:hasSource :Source)

# Object Property: :isCommentOn (:isCommentOn)

ObjectPropertyDomain(:isCommentOn :Comment)
ObjectPropertyRange(:isCommentOn ObjectUnionOf(:Comment :Post))

# Object Property: :isOriginalPosterOfPost (:isOriginalPosterOfPost)

ObjectPropertyDomain(:isOriginalPosterOfPost :User)
ObjectPropertyRange(:isOriginalPosterOfPost :Post)

# Object Property: :refersToMovie (:refersToMovie)

ObjectPropertyDomain(:refersToMovie :Post)
ObjectPropertyRange(:refersToMovie :Movie)


############################
#   Data Properties
############################

# Data Property: :hasDate (:hasDate)

DataPropertyDomain(:hasDate ObjectUnionOf(:Comment :Post))
DataPropertyRange(:hasDate xsd:dateTimeStamp)

# Data Property: :hasId (:hasId)

DataPropertyDomain(:hasId ObjectUnionOf(:RedditPost :Tweet :User))
DataPropertyRange(:hasId xsd:string)

# Data Property: :hasLikes (:hasLikes)

DataPropertyDomain(:hasLikes ObjectUnionOf(:Comment :Post))
DataPropertyRange(:hasLikes xsd:integer)

# Data Property: :hasRetweet (:hasRetweet)

DataPropertyDomain(:hasRetweet :Tweet)
DataPropertyRange(:hasRetweet xsd:integer)

# Data Property: :hasText (:hasText)

DataPropertyDomain(:hasText ObjectUnionOf(:Comment :Post))
DataPropertyRange(:hasText xsd:string)

# Data Property: :hasTitle (:hasTitle)

DataPropertyDomain(:hasTitle ObjectUnionOf(:RedditPost :YoutubePost))
DataPropertyRange(:hasTitle xsd:string)

# Data Property: :hasUsername (:hasUsername)

DataPropertyDomain(:hasUsername :User)
DataPropertyRange(:hasUsername xsd:string)



############################
#   Classes
############################

# Class: :Action (:Action)

SubClassOf(:Action :Movie)

# Class: :Comment (:Comment)

SubClassOf(:Comment ObjectExactCardinality(1 :createdBy :User))
SubClassOf(:Comment ObjectExactCardinality(1 :hasEmotion :Emotion))
DisjointClasses(:Comment :Post)

# Class: :Drama (:Drama)

SubClassOf(:Drama :Movie)

# Class: :Horror (:Horror)

SubClassOf(:Horror :Movie)

# Class: :Indifferent (:Indifferent)

SubClassOf(:Indifferent :Emotion)

# Class: :InstaPost (:InstaPost)

SubClassOf(:InstaPost :Post)

# Class: :Instagram (:Instagram)

SubClassOf(:Instagram :Source)

# Class: :Kids (:Kids)

SubClassOf(:Kids :Movie)

# Class: :Negative (:Negative)

SubClassOf(:Negative :Emotion)

# Class: :Positive (:Positive)

SubClassOf(:Positive :Emotion)

# Class: :Post (:Post)

SubClassOf(:Post ObjectExactCardinality(1 :createdBy :User))
SubClassOf(:Post ObjectExactCardinality(1 :hasEmotion :Emotion))
SubClassOf(:Post ObjectExactCardinality(1 :hasSource :Source))
SubClassOf(:Post ObjectExactCardinality(1 :refersToMovie :Movie))

# Class: :Reddit (:Reddit)

SubClassOf(:Reddit :Source)

# Class: :RedditPost (:RedditPost)

SubClassOf(:RedditPost :Post)

# Class: :Romance (:Romance)

SubClassOf(:Romance :Movie)

# Class: :Tweet (:Tweet)

SubClassOf(:Tweet :Post)

# Class: :Twitter (:Twitter)

SubClassOf(:Twitter :Source)

# Class: :User (:User)

SubClassOf(:User ObjectMinCardinality(0 :isOriginalPosterOfPost :Post))

# Class: :Youtube (:Youtube)

SubClassOf(:Youtube :Source)

# Class: :YoutubePost (:YoutubePost)

SubClassOf(:YoutubePost :Post)


DisjointClasses(:Indifferent :Negative :Positive)
)